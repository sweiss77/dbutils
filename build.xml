<!-- $Id$ -->

<!-- 
For instructions on how to build the library, please view the README.txt file.
-->

<project default="jar" basedir=".">

    <!-- =================================================================== -->
    <!-- Initialization target                                               -->
    <!-- =================================================================== -->
    <target name="init">

        <tstamp />
        <property environment="env" />
        <property name="Vendor" value="NASA HQ" />
        <property name="vendor" value="nasa_hq" />
        <property name="Name" value="NASA HQ Java SQL Utilities" />
        <property name="name" value="hq_sqlutils" />
        <property name="project-description"
                          value="Database Utilities" />
        <property name="version.major" value="0" />
        <property name="version.minor" value="9" />
        <property name="version.dot" value="4" />
        <property name="version"
                  value="${version.major}.${version.minor}.${version.dot}" />
        <property name="version.underscore"
                  value="${version.major}_${version.minor}_${version.dot}" />
        <property name="dist.dir" value="./dist/${name}-${version}" />
        <property name="year" value="2009" />
        <property name="jarfile"
                  value="${name}-${version.major}.${version.minor}.${version.dot}.jar" />

        <echo message="----------- ${Name} ${version} [${year}] ------------" />

        <property name="debug" value="off" />
        <property name="optimize" value="on" />
        <property name="deprecation" value="on" />

        <property name="src.dir" value="./src" />
        <property name="lib.dir" value="./lib" />
        <property name="packages" value="gov.nasa.hq.*" />

        <property name="build.dir" value="./build" />
        <property name="build.src" value="./build/src" />
        <property name="build.dest" value="./build/classes" />
        <property name="javadoc.root" value="${build.dir}/javadoc" />
        <property name="build.javadocs" value="${javadoc.root}/${name}/apidocs" />

        <property name="dist.root" value="./dist" />
        <property name="dist.dir" value="${dist.root}/${name}-${version}" />

        <property name="package.dir" value="./package" />

        <filter token="year" value="${year}" />
        <filter token="version" value="${version}" />
        <filter token="date" value="${TODAY}" />
        <filter token="log" value="true" />
        <filter token="verbose" value="true" />

        <property name="javadoc.publish.host" value="osiris.hitsshq.com" />
        <property name="javadoc.publish.path" value="/usr/local/data/www/htdocs/share/docs/java/javadocs" />

    </target>

    <!-- =================================================================== -->
    <!-- Help on usage                                                       -->
    <!-- =================================================================== -->
    <target name="usage">
        <echo message="" />
        <echo message="" />
        <echo message="Java SQL Utilities Build file" />
        <echo message="-------------------------------------------------------------" />
        <echo message="" />
        <echo message=" available targets are:" />
        <echo message="" />
        <echo message="   package  --> generates the webapp.jar file (default)" />
        <echo message="   compile  --> compiles the source code" />
        <echo message="   javadoc  --> generates the API documentation" />
        <echo message="   clean    --> cleans up the directory" />
        <echo message="" />
        <echo message=" See the comments inside the build.xml file for more details." />
        <echo message="-------------------------------------------------------------" />
        <echo message="" />
        <echo message="" />
    </target>

    <!-- =================================================================== -->
    <!-- Prepares the build directory                                        -->
    <!-- =================================================================== -->
    <target name="prepare" depends="init">
        <mkdir dir="${build.dir}" />
    </target>

    <!-- =================================================================== -->
    <!-- Prepares the source code                                            -->
    <!-- =================================================================== -->
    <target name="prepare-src" depends="prepare">
        <!-- create directories -->
        <mkdir dir="${build.src}" />
        <mkdir dir="${build.dest}" />

        <!-- copy src files -->
        <copy todir="${build.src}" filtering="yes">
            <fileset dir="${src.dir}" />
        </copy>
    </target>

    <!-- =================================================================== -->
    <!-- Compiles the source directory                                       -->
    <!-- =================================================================== -->
    <target name="compile" depends="prepare-src">
        <echo message="Compiling with flags: debug = ${debug}, optimize = ${optimize} deprecation = ${deprecation}" />
        <javac srcdir="src"
               destdir="${build.dest}"
               debug="${debug}"
               verbose="${verbose}"
               deprecation="${deprecation}"
               optimize="${optimize}">
            <classpath>
                <pathelement path="${build.dest}" />
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                </fileset>
            </classpath>
        </javac>
    </target>

    <!-- =================================================================== -->
    <!-- Compiles the "About" code                                           -->
    <!-- =================================================================== -->
    <target name="about">
        <javac srcdir="${package.dir}"
               destdir="${build.dest}"
               debug="${debug}"
               verbose="${verbose}"
               optimize="${optimize}" />
    </target>

    <target name="build-share"
            depends="jar"
            description="Moves generated jar file to share/common/deploy/lib.">
        <echo message="Checking ../../common/deploy/lib/${jarfile}" />
        <copy file="${build.dir}/${jarfile}"
              tofile="../../common/deploy/lib/${jarfile}"
              filtering="no" />
    </target>

    <!-- =================================================================== -->
    <!-- Creates the JAR file                                                -->
    <!-- =================================================================== -->
    <target name="jar" depends="compile">
        <fixcrlf srcdir="."
                 includes="**/*.bat"
                 excludes="build*.*"
                 eol="crlf" />
        <fixcrlf srcdir="." includes="**/*.sh" excludes="build*.*" eol="lf" />
        <jar jarfile="${build.dir}/${jarfile}" basedir="${build.dest}">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Implementation-Vendor" value="Indyne Inc." />
                <attribute name="Implementation-Title" value="${Name}" />
                <attribute name="Implementation-Version" value="${version}" />
                <attribute name="jar-name" value="${jarfile}" />
            </manifest>
        </jar>
    </target>

    <!--
       This target just sets compiler flags so that the code will
       be optimized when running the dist target
    -->
    <target name="optimize">
        <property name="debug" value="off" />
        <property name="optimeze" value="on" />
        <property name="verbose" value="off" />
    </target>

    <!-- Builds a .tar.gz file containing all needed JAR files, JSPs and docs -->
    <target name="dist" depends="optimize,clean,compile">
        <echo message="creating dist directory: ${dist.dir}" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${dist.dir}/docs" />
        <copy todir="${dist.dir}/docs">
            <fileset dir="./docs">
                <include name="**/*.txt" />
            </fileset>
        </copy>
        <jar jarfile="${dist.dir}/${name}-${version.underscore}.jar"
             basedir="${build.dir}/classes" />
        <tar tarfile="./dist/${name}-${version.underscore}.tar">
            <tarfileset dir="${dist.dir}" />
        </tar>
        <gzip zipfile="./dist/${name}-${version.underscore}.tar.gz"
              src="./dist/${name}-${version.underscore}.tar" />
        <delete file="./dist/${name}-${version.underscore}.tar" />
        <delete dir="${build.dir}" />
    </target>

    <!-- =================================================================== -->
    <!-- Creates the API documentation                                       -->
    <!-- =================================================================== -->
    <target name="javadoc" depends="prepare-src">
        <mkdir dir="${build.javadocs}" />
        <javadoc packagenames="${packages}"
                 sourcepath="${build.src}"
                 destdir="${build.javadocs}"
                 author="true"
                 version="true"
                 use="true"
                 splitindex="true"
                 noindex="false"
                 windowtitle="${Vendor} ${Name} API"
                 doctitle="${Name}">
            <classpath>
                <pathelement path="${build.dest}" />
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar" />
                </fileset>
                <!--
                <fileset dir="${catalina.home}/lib">
                    <include name="**/*.jar" />
                </fileset>
                -->
            </classpath>
        </javadoc>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the API documentation, with links to JDK 1.5 classes        -->
    <!-- We can use linkoffline with a newer Ant and avoid this target       -->
    <!-- =================================================================== -->
    <target name="javadoc-link" depends="prepare-src">
        <mkdir dir="${build.javadocs}" />
        <javadoc packagenames="${packages}"
                 sourcepath="${build.src}"
                 destdir="${build.javadocs}"
                 author="true"
                 version="true"
                 use="true"
                 splitindex="true"
                 noindex="false"
                 windowtitle="${Name} API"
                 doctitle="${Name}"
                 link="http://java.sun.com/j2se/1.5/docs/api" />
    </target>

    <!-- =================================================================== -->
    <!-- Clean targets                                                       -->
    <!-- =================================================================== -->
    <target name="clean" depends="init">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir} " />
        <delete dir="${release.root}" />
    </target>

    <target name="distclean" depends="clean">
        <delete dir="${dist.root}" />
        <delete file="${Name}-${version}.tar.gz" />
        <delete file="${Name}-${version}.tar" />
        <delete file="${Name}-${version}.zip" />
    </target>

    <!-- Release targets -->

    <target name="release-prepare" depends="jar">
        <subant target="release-prepare" inheritall="true" inheritrefs="true">
            <filelist dir="./release" files="build.xml" />
        </subant>
    </target>

    <target name="release" depends="clean,optimize,jar">
        <subant target="release" inheritall="true" inheritrefs="true">
            <filelist dir="./release" files="build.xml" />
        </subant>
    </target>

    <target name="javadoc-publish" depends="javadoc-link">
        <input message="Username (${javadoc.publish.host}):"
               addproperty="username"
               defaultvalue="${remoteUser}" />
        <input message="Password (CAUTION, THIS WILL BE ECHOED!):" addproperty="password" />
        <scp todir="${username}:${password}@${javadoc.publish.host}:${javadoc.publish.path}">
            <fileset dir="${javadoc.root}" />
        </scp>
    </target>

</project>

<!-- End of file -->
